generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String @unique
    password String

    cart      Cart[]
    orders Order[] 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    productOptions ProductOption[]
    ingridients    Ingridient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductOption {
    id Int @id @default(autoincrement())

    name      String
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

model Ingridient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    products Product[]

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    items CartItem[]

    token String?

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    productOption   ProductOption @relation(fields: [productOptionId], references: [id])
    productOptionId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int

    ingridients Ingridient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int?
    
    token String

    totalAmount Int
    status OrderStatus
    paymentId String?

    items Json

    fullName String
    email String
    phone String
    address String
    comment String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELED
}